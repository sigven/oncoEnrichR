### Regulatory interactions

::: {.callout-note}
## Synopsis

* Using data from the [OmniPathR/CollecTRI](https://saezlab.github.io/CollecTRI/) resource, we are here interrogating *previously established* transcription factor (TF) - target interactions for members of the query set. CollecTRI-derived regulons contain signed transcription factor (TF) - target gene interactions compiled from 12 different resources.

* In **CollecTRI**, each interaction is assigned a confidence level based on the number of supporting resources (*n_resources*), ranging from 6 (highest confidence) to 1 (lowest confidence)
   
* Here, we show regulatory interactions related to the queryset along three different axes: 

  _i)_ interactions for which **both regulatory gene and regulatory target** are found in the queryset
  _ii)_ interactions for which **only the regulatory gene** is found in the queryset
  _iii)_ interactions for which **only the regulatory target** is found in the queryset
  - Interactions are ranked according to confidence, visualized in varying shades of blue (from <span style="background-color:#4292c6; padding:2x; color:white"><b>&nbsp; low-confident interactions &nbsp; </b></span>&nbsp; to <span style="background-color:#08306b; padding:2x; color:white"><b>&nbsp; high-confident interactions &nbsp; </b></span>).
  

:::

<br>

```{r regulatory_prep}
#| echo: false
#| output: asis
#| eval: true


reg_interactions <- list()
active_tab <- list()

reg_interactions[['tf_target']] <- data.frame()
reg_interactions[['tf_only']] <- data.frame()
reg_interactions[['target_only']] <- data.frame()

active_tab[['tf_target']] <- F
active_tab[['tf_only']] <- F
active_tab[['target_only']] <- F

if(NROW(onc_enrich_report[['data']][['regulatory']][['interactions']]) > 0){
  reg_interactions[['tf_target']] <- 
    onc_enrich_report[['data']][['regulatory']][['interactions']] |>
    dplyr::filter(stringr::str_detect(queryset_overlap,"TF_TARGET_")) |>
    dplyr::select(-c(regulator_cancer_max_rank,
                     target_cancer_max_rank)) |>
    head(1000)
  
  if(NROW(reg_interactions[['tf_target']]) > 0){
    active_tab[['tf_target']] <- T
  }
  
  reg_interactions[['tf_only']] <- 
    onc_enrich_report[['data']][['regulatory']][['interactions']] |>
    dplyr::filter(stringr::str_detect(queryset_overlap,"^(TF_(1|2|3|4|5|6))$")) |>
    dplyr::select(-c(regulator_cancer_max_rank,
                     target_cancer_max_rank)) |>
    head(1000)
  
  if(NROW(reg_interactions[['tf_only']]) > 0 & 
     active_tab[['tf_target']] == F){
    active_tab[['tf_only']] <- T
  }
  
  reg_interactions[['target_only']] <- 
    onc_enrich_report[['data']][['regulatory']][['interactions']] |>
    dplyr::filter(stringr::str_detect(queryset_overlap,"^(TARGET_(1|2|3|4|5|6))$")) |>
    dplyr::select(-c(regulator_cancer_max_rank,
                     target_cancer_max_rank)) |>
    head(1000)
  
  if(NROW(reg_interactions[['target_only']]) > 0 & 
     active_tab[['tf_target']] == F &
     active_tab[['tf_only']] == F){
    active_tab[['target_only']] <- T
  }
}


if(active_tab[['tf_target']] == F & 
   active_tab[['tf_only']] == F & 
   active_tab[['target_only']] == F){
  active_tab[['tf_target']] <- T
}


```


#### CollecTRI-derived regulons 

::: {.panel-tabset}

```{r active_tab_tf_target}
#| echo: false
#| output: asis

if(active_tab[['tf_target']] == T){
  cat("")
  cat("##### Regulatory gene and target {.active}")
  cat("")
}else{
  cat("")
  cat("##### Regulatory gene and target")
  cat("")
}
```


```{r regulatory_interactions_1}
#| echo: false
#| output: asis
#| eval: !expr as.logical(NROW(reg_interactions[['tf_target']]) > 0) == TRUE

tf_target_sd <- 
  crosstalk::SharedData$new(reg_interactions[['tf_target']])

crosstalk::bscols(
  list(
    crosstalk::filter_select(
      "transcription_regulator", "Regulator", tf_target_sd, ~regulator)
  ),
  list(
    crosstalk::filter_select(
      "target_gene", "Target", tf_target_sd, ~target),
    crosstalk::filter_slider(
      "n_resources", "Confidence level (supporting resources)", 
      step = 1, min = 2, max = 6,
      tf_target_sd, ~n_resources)
  )
)

htmltools::br()

DT::datatable(
  tf_target_sd, 
  escape = F, 
  extensions=c("Buttons","Responsive"), 
  width = "100%",
  #style = 'bootstrap',
  rownames = F,
  options=list(buttons = c('csv','excel'),
               pageLength = 10,
               bPaginate = T,
               dom = 'Bfrtip')
  ) |>
  DT::formatStyle(
    'regulator', 
    'queryset_overlap',
    color = "white",
    backgroundColor = DT::styleEqual(
      onc_enrich_report[["config"]][["regulatory"]][["tf_levels"]],
      onc_enrich_report[["config"]][["regulatory"]][["tf_colors"]]
    )
  ) |>
  DT::formatStyle(
    'target', 
    'queryset_overlap',
    color = "white",
    backgroundColor = DT::styleEqual(
      onc_enrich_report[["config"]][["regulatory"]][["target_levels"]],
      onc_enrich_report[["config"]][["regulatory"]][["target_colors"]]
    )
  )



```
<br><br>


```{r regulatory_interactions_missing_1}
#| echo: false
#| output: asis
#| eval: !expr as.logical(NROW(reg_interactions[['tf_target']]) == 0) == TRUE

cat('\n <ul><li>  <i> <span style="font-size: 105%; padding: 3px; background-color:#989898; color:white">&nbsp;&nbsp;<b>NO</b> genes in the queryset are involved in regulatory interactions (CollecTRI) for which <b>BOTH</b> the regulatory gene and the target are part of the queryset.&nbsp;&nbsp; </span></i></li></ul>',sep='\n')
cat('\n')
cat('<br><br>')

```

<br>

```{r active_tab_tf}
#| echo: false
#| output: asis

if(active_tab[['tf_only']] == T){
  cat("")
  cat("##### Regulatory gene only {.active}")
  cat("")
}else{
  cat("")
  cat("##### Regulatory gene only")
  cat("")
}
```


```{r regulatory_interactions_2}
#| echo: false
#| output: asis
#| eval: !expr as.logical(NROW(reg_interactions[['tf_only']]) > 0) == TRUE

tf_only_sd <- 
  crosstalk::SharedData$new(reg_interactions[['tf_only']])

crosstalk::bscols(
  list(
    crosstalk::filter_select(
      "transcription_regulator", "Regulator", tf_only_sd, ~regulator)
  ),
  list(
    crosstalk::filter_select("target_gene", "Target", tf_only_sd, ~target),
    crosstalk::filter_slider(
      "n_resources", "Confidence level (supporting resources)", 
      step = 1, min = 2, max = 6,
      tf_only_sd, ~n_resources)
  )
)

htmltools::br()

DT::datatable(
  tf_only_sd, 
  escape = F, 
  extensions=c("Buttons","Responsive"), 
  width = "100%",
  #style = 'bootstrap',
  rownames = F,
  options=list(buttons = c('csv','excel'),
               pageLength = 10,
               bPaginate = T,
               dom = 'Bfrtip')
  ) |>
  DT::formatStyle(
    'regulator', 
    'queryset_overlap',
    color = "white",
    backgroundColor = DT::styleEqual(
      onc_enrich_report[["config"]][["regulatory"]][["tf_levels"]],
      onc_enrich_report[["config"]][["regulatory"]][["tf_colors"]]
    )
  )



```
<br><br>


```{r regulatory_interactions_missing_2}
#| echo: false
#| output: asis
#| eval: !expr NROW(reg_interactions[['tf_only']]) == 0
cat('\n <ul><li>  <i> <span style="font-size: 105%; padding: 3px; background-color:#989898; color:white">&nbsp;&nbsp;<b>NO</b> genes in the queryset are involved in regulatory interactions (CollecTRI) for which <b>ONLY</b> the regulatory gene is part of the queryset.&nbsp;&nbsp; </span></i></li></ul>',sep='\n')
cat('\n')
cat('<br><br>')

```

<br>

```{r active_tab_target_global}
#| echo: false
#| output: asis

if(active_tab[['target_only']] == T){
  cat("")
  cat("##### Target only {.active}")
  cat("")
}else{
  cat("")
  cat("##### Target only")
  cat("")
}
```


```{r regulatory_interactions_3}
#| echo: false
#| output: asis
#| eval: !expr as.logical(NROW(reg_interactions[['target_only']]) > 0) == TRUE
 

target_only_sd <- 
  crosstalk::SharedData$new(reg_interactions[['target_only']])

crosstalk::bscols(
  list(
    crosstalk::filter_select(
      "transcription_regulator", "Regulator", target_only_sd, ~regulator)
  ),
  list(
    crosstalk::filter_select("target_gene", "Target", target_only_sd, ~target),
    crosstalk::filter_slider(
      "n_resources", "Confidence level (supporting resources)", 
      step = 1, min = 2, max = 6,
      target_only_sd, ~n_resources)
  )
)

htmltools::br()

DT::datatable(
  target_only_sd, 
  escape = F, 
  extensions=c("Buttons","Responsive"), 
  width = "100%",
  #style = 'bootstrap',
  rownames = F,
  options=list(buttons = c('csv','excel'),
               pageLength = 10,
               bPaginate = T,
               dom = 'Bfrtip')
  )  |>
  DT::formatStyle(
    'target', 
    'queryset_overlap',
    color = "white",
    backgroundColor = DT::styleEqual(
      onc_enrich_report[["config"]][["regulatory"]][["target_levels"]],
      onc_enrich_report[["config"]][["regulatory"]][["target_colors"]]
    )
  )



```
<br><br>


```{r regulatory_interactions_missing_3}
#| echo: false
#| output: asis
#| eval: !expr NROW(reg_interactions[['target_only']]) == 0

cat('\n <ul><li>  <i> <span style="font-size: 105%; padding: 3px; background-color:#989898; color:white">&nbsp;&nbsp;<b>NO</b> genes in the queryset are involved in regulatory interactions (CollecTRI) for which <b>ONLY</b> the regulatory target is part of the queryset.&nbsp;&nbsp; </span></i></li></ul>',sep='\n')
cat('\n')
cat('<br><br>')

```

:::

<br>

#### Key regulatory network interactions

* Visualization of known regulatory interactions (**CollecTRI**) where both **regulator** and **target** are found in the query set

   * Edge *length* between nodes reflects confidence level of regulatory interaction (shorter lengths - higher confidence)
   * Edge *color* between nodes indicates mode of regulation (&nbsp;<span style="background-color:darkgreen; padding:2x; color:white"><b>&nbsp; Stimulation &nbsp; </b></span>&nbsp; vs. <span style="background-color:darkred; padding:2x; color:white"><b>&nbsp; Repression &nbsp; </b></span>&nbsp;)

<br><br>

```{r regulatory_network}
#| echo: false
#| output: asis
#| fig-width: 14
#| fig-height: 12
#| eval: !expr NROW(onc_enrich_report[['data']][['regulatory']][['network']][['nodes']]) > 0 & NROW(onc_enrich_report[['data']][['regulatory']][['network']][['edges']]) > 0

regulatory_nodes <- onc_enrich_report[['data']][['regulatory']][['network']][['nodes']]
regulatory_edges <- onc_enrich_report[['data']][['regulatory']][['network']][['edges']]

visNetwork::visNetwork(regulatory_nodes, regulatory_edges) |> 
  visNetwork::visInteraction(multiselect=TRUE, tooltipDelay=300) |>
  visNetwork::visLegend()
  #visNetwork::visIgraphLayout(layout="layout_nicely")
```

```{r regulatory_network_missing}
#| echo: false
#| output: asis
#| eval: !expr NROW(onc_enrich_report[['data']][['regulatory']][['network']][['nodes']]) == 0

cat('\n <ul><li>  <i> <span style="font-size: 105%; padding: 3px; background-color:#989898; color:white">&nbsp;&nbsp;<b>NO</b> pair of genes in the queryset are involved in regulatory interactions (<b>as reported in CollecTRI</b>)&nbsp;&nbsp; </span></i></li></ul>',sep='\n')
cat('\n')
cat('<br><br>')

```
